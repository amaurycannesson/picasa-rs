
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/


export const commands = {
async searchPhotos(params: PhotoSearchParams) : Promise<Result<PaginatedPhotos, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("search_photos", { params }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async loadPhotoThumbnail(path: string) : Promise<Result<number[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("load_photo_thumbnail", { path }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async loadPhoto(path: string) : Promise<Result<number[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("load_photo", { path }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getPhoto(id: number) : Promise<Result<Photo, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_photo", { id }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getSearchOptions() : Promise<Result<PhotoSearchOptions, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_search_options") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getPendingManualReviews() : Promise<Result<PendingFaceReview[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_pending_manual_reviews") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async loadFaceImage(faceId: number) : Promise<Result<number[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("load_face_image", { faceId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async createPersonFromFaces(personName: string, faceIds: number[]) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("create_person_from_faces", { personName, faceIds }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async listPersons() : Promise<Result<Person[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("list_persons") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getPerson(id: number) : Promise<Result<Person, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_person", { id }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
}
}

/** user-defined events **/



/** user-defined constants **/



/** user-defined types **/

export type CityName = { id: number; name: string }
export type CountryName = { id: number; name: string | null }
export type PaginatedPhotos = { items: Photo[]; total: number; page: number; per_page: number; total_pages: number }
export type PendingFaceReview = { cluster_id: number; face_ids: number[]; confidence: number; face_count: number }
export type Person = { id: number; name: string }
export type Photo = { id: number; path: string; file_name: string; file_size: number; created_at: string; modified_at: string; hash: string | null; camera_make: string | null; camera_model: string | null; lens_model: string | null; orientation: number | null; date_taken_local: string | null; date_taken_utc: string | null; image_width: number | null; image_height: number | null; face_detection_completed: boolean; country_id: number | null; city_id: number | null }
export type PhotoSearchOptions = { cities: CityName[]; countries: CountryName[]; persons: Person[] }
export type PhotoSearchParams = { text: string | null; threshold: number | null; country: string | null; country_id: number | null; city: string | null; city_id: number | null; date_from: string | null; date_to: string | null; person_id: number | null; page: number; per_page: number }

/** tauri-specta globals **/

import {
	invoke as TAURI_INVOKE,
	Channel as TAURI_CHANNEL,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
	listen: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
	once: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
	emit: null extends T
		? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
		: (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
	| { status: "ok"; data: T }
	| { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
	mappings: Record<keyof T, string>,
) {
	return new Proxy(
		{} as unknown as {
			[K in keyof T]: __EventObj__<T[K]> & {
				(handle: __WebviewWindow__): __EventObj__<T[K]>;
			};
		},
		{
			get: (_, event) => {
				const name = mappings[event as keyof T];

				return new Proxy((() => {}) as any, {
					apply: (_, __, [window]: [__WebviewWindow__]) => ({
						listen: (arg: any) => window.listen(name, arg),
						once: (arg: any) => window.once(name, arg),
						emit: (arg: any) => window.emit(name, arg),
					}),
					get: (_, command: keyof __EventObj__<any>) => {
						switch (command) {
							case "listen":
								return (arg: any) => TAURI_API_EVENT.listen(name, arg);
							case "once":
								return (arg: any) => TAURI_API_EVENT.once(name, arg);
							case "emit":
								return (arg: any) => TAURI_API_EVENT.emit(name, arg);
						}
					},
				});
			},
		},
	);
}
